<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Spring MVC快速入门(一)</title>
      <link href="/2018/05/28/PracticeSpringMvc/"/>
      <url>/2018/05/28/PracticeSpringMvc/</url>
      <content type="html"><![CDATA[<h2 id="1-Spring-MVC框架"><a href="#1-Spring-MVC框架" class="headerlink" title="1.Spring MVC框架"></a>1.Spring MVC框架</h2><h3 id="1-1Spring-MVC介绍"><a href="#1-1Spring-MVC介绍" class="headerlink" title="1.1Spring MVC介绍"></a>1.1Spring MVC介绍</h3><p>SpringMVC和Struts2都属于表现层的框架，它是Spring框架的一个模块，提供web层解决方案，我们可以从Spring的整体结构中看得出来:</p><a id="more"></a><figure class="image-box">                <img src="http://owtr5yq3h.bkt.clouddn.com/spring-mvc%28%E4%B8%80%29.png" alt="SpringMvc整体架构" title="" class="">                <p>SpringMvc整体架构</p>            </figure><h3 id="1-2Spring-MVC处理流程"><a href="#1-2Spring-MVC处理流程" class="headerlink" title="1.2Spring MVC处理流程"></a>1.2Spring MVC处理流程</h3><figure class="image-box">                <img src="http://owtr5yq3h.bkt.clouddn.com/spring-mvc%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%28%E4%B8%80%29MVC%E6%A8%A1%E5%BC%8F.png" alt="MVC模式" title="" class="">                <p>MVC模式</p>            </figure><p>解释如下:</p><ul><li>用户发送请求给前端控制器(DispatcherServlet),它是SpringMvc的核心,它负责SpringMvc中所有组件的流转和控制。</li><li>前端控制器把请求发送给处理器Handler(Controller),处理器获得到请求之后，会从请求中获取传过来的参数。把数据发送给Service，Service发送给Dao，DAO和数据库进行交互，把处理结果返回给处理器Handler(Controller)。处理器(Controller)把处理结果返回给前端控制器(DispatcherServlet)。</li><li>前端控制器(DispatcherServlet)把处理结果转发给jsp，jsp把数据和标签进行封装成静态html，返回给前端控制器。</li><li>前端控制器把响应返回给用户。</li></ul><h3 id="1-3Spring-MVC框架结构"><a href="#1-3Spring-MVC框架结构" class="headerlink" title="1.3Spring MVC框架结构"></a>1.3Spring MVC框架结构</h3><h4 id="1-3-1架构图"><a href="#1-3-1架构图" class="headerlink" title="1.3.1架构图"></a>1.3.1架构图</h4><figure class="image-box">                <img src="http://owtr5yq3h.bkt.clouddn.com/spring-mvc%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%28%E4%B8%80%29%E6%9E%B6%E6%9E%84.png" alt="MVC框架结构" title="" class="">                <p>MVC框架结构</p>            </figure><h4 id="1-3-2架构流程"><a href="#1-3-2架构流程" class="headerlink" title="1.3.2架构流程"></a>1.3.2架构流程</h4><ul><li>1.用户发送请求至前端控制器DispatcherServlet</li><li>2.DispatcherServlet收到请求调用HandlerMapping处理器映射器。</li><li>3.处理器映射器根据请求url找到具体的处理器，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet。</li><li>4.DispatcherServlet通过HandlerAdapter处理器适配器调用处理器</li><li>5.执行处理器(Controller，也叫后端控制器)。 6、    Controller执行完成返回ModelAndView</li><li>7.HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet</li><li>8.DispatcherServlet将ModelAndView传给ViewReslover视图解析器</li><li>9.ViewReslover解析后返回具体View</li><li>10.DispatcherServlet对View进行渲染视图（即将模型数据填充至视图中）。</li><li>11.DispatcherServlet响应用户</li></ul><h4 id="1-3-3架构中涉及的组件说明"><a href="#1-3-3架构中涉及的组件说明" class="headerlink" title="1.3.3架构中涉及的组件说明"></a>1.3.3架构中涉及的组件说明</h4><p>以下组件通常使用框架提供实现：</p><ul><li><p>DispatcherServlet：前端控制器<br>用户请求到达前端控制器，它就相当于mvc模式中的c，dispatcherServlet是整个流程控制的中心，由它调用其它组件处理用户的请求，dispatcherServlet的存在降低了组件之间的耦合性。</p></li><li><p>HandlerMapping：处理器映射器<br>HandlerMapping负责根据用户请求找到Handler即处理器，springmvc提供了不同的映射器实现不同的映射方式，例如：配置文件方式，实现接口方式，注解方式等。</p></li><li><p>Handler：处理器<br>Handler 是继DispatcherServlet前端控制器的后端控制器，在DispatcherServlet的控制下Handler对具体的用户请求进行处理。<br>由于Handler涉及到具体的用户业务请求，所以一般情况需要程序员根据业务需求开发Handler。</p></li><li><p>HandlAdapter：处理器适配器<br>通过HandlerAdapter对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。</p></li></ul><ul><li>View Resolver：视图解析器<br>View Resolver负责将处理结果生成View视图，View Resolver首先根据逻辑视图名解析成物理视图名即具体的页面地址，再生成View视图对象，最后对View进行渲染将处理结果通过页面展示给用户。 </li><li>View：视图<br>springmvc框架提供了很多的View视图类型的支持，包括：jstlView、freemarkerView、pdfView等。我们最常用的视图就是jsp。<br>一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由程序员根据业务需求开发具体的页面。</li></ul><p><code>说明</code>：在springmvc的各个组件中，处理器映射器、处理器适配器、视图解析器称为springmvc的三大组件。<br>需要用户开放的组件有handler、view</p>]]></content>
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Mvc </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MySQL语法查漏补缺</title>
      <link href="/2018/05/28/PracticeMysql/"/>
      <url>/2018/05/28/PracticeMysql/</url>
      <content type="html"><![CDATA[<p>练习使用的数据库为随身物品推销商订单录入系统，包括6个表：供应商表（vendors）、产品目录表（products）、顾客表（customers）、订单表（orders）、订单详情表(orderitems)、产品注释表（productnotes）<br><a id="more"></a><br>表1 Vendors（供应商表）</p><table><thead><tr><th style="text-align:center">属性名</th><th style="text-align:center">数据类型</th><th style="text-align:center">可否为空</th><th style="text-align:center">含 义</th></tr></thead><tbody><tr><td style="text-align:center">vend_id</td><td style="text-align:center">int(11)</td><td style="text-align:center">否</td><td style="text-align:center">唯一的供应商ID</td></tr><tr><td style="text-align:center">vend_name</td><td style="text-align:center">char(50)</td><td style="text-align:center">否</td><td style="text-align:center">供应商名</td></tr><tr><td style="text-align:center">vend_address</td><td style="text-align:center">char(50)</td><td style="text-align:center">是</td><td style="text-align:center">供应商地址</td></tr><tr><td style="text-align:center">vend_city</td><td style="text-align:center">char(50)</td><td style="text-align:center">是</td><td style="text-align:center">供应商的城市</td></tr><tr><td style="text-align:center">vend_state</td><td style="text-align:center">char(5)</td><td style="text-align:center">是</td><td style="text-align:center">供应商的州</td></tr><tr><td style="text-align:center">vend_zip</td><td style="text-align:center">char(10)</td><td style="text-align:center">是</td><td style="text-align:center">供应商的邮政编码</td></tr><tr><td style="text-align:center">vend_country</td><td style="text-align:center">char(50)</td><td style="text-align:center">是</td><td style="text-align:center">供应商的国家</td></tr></tbody></table><p>&nbsp;&nbsp;<br>表2 Products（产品目录表）</p><table><thead><tr><th style="text-align:center">属性名</th><th style="text-align:center">数据类型</th><th style="text-align:center">可否为空</th><th style="text-align:center">含 义</th></tr></thead><tbody><tr><td style="text-align:center">prod_id</td><td style="text-align:center">char(10)</td><td style="text-align:center">否</td><td style="text-align:center">唯一的供应商ID</td></tr><tr><td style="text-align:center">vend_id</td><td style="text-align:center">int(11)</td><td style="text-align:center">否</td><td style="text-align:center">供应商名</td></tr><tr><td style="text-align:center">prod_name</td><td style="text-align:center">char(255)</td><td style="text-align:center">否</td><td style="text-align:center">供应商地址</td></tr><tr><td style="text-align:center">prod_price</td><td style="text-align:center">decimal(8)</td><td style="text-align:center">否</td><td style="text-align:center">供应商的城市</td></tr><tr><td style="text-align:center">prod_desc</td><td style="text-align:center">text(0)</td><td style="text-align:center">是</td><td style="text-align:center">供应商的州</td></tr></tbody></table><p>&nbsp;&nbsp;<br>表3 Customers（顾客表）</p><table><thead><tr><th style="text-align:center">属性名</th><th style="text-align:center">数据类型</th><th style="text-align:center">可否为空</th><th style="text-align:center">含 义</th></tr></thead><tbody><tr><td style="text-align:center">cust_id</td><td style="text-align:center">int(11)</td><td style="text-align:center">否</td><td style="text-align:center">唯一的顾客ID</td></tr><tr><td style="text-align:center">cust_name</td><td style="text-align:center">char(50)</td><td style="text-align:center">否</td><td style="text-align:center">顾客名</td></tr><tr><td style="text-align:center">cust_address</td><td style="text-align:center">char(50)</td><td style="text-align:center">是</td><td style="text-align:center">顾客的地址</td></tr><tr><td style="text-align:center">cust_city</td><td style="text-align:center">char(50)</td><td style="text-align:center">是</td><td style="text-align:center">顾客的城市</td></tr><tr><td style="text-align:center">cust_state</td><td style="text-align:center">char(5)</td><td style="text-align:center">是</td><td style="text-align:center">顾客的州</td></tr><tr><td style="text-align:center">cust_zip</td><td style="text-align:center">char(10)</td><td style="text-align:center">是</td><td style="text-align:center">顾客的邮政编码</td></tr><tr><td style="text-align:center">cust_country</td><td style="text-align:center">char(50)</td><td style="text-align:center">是</td><td style="text-align:center">顾客的国家</td></tr><tr><td style="text-align:center">cust_contact</td><td style="text-align:center">char(50)</td><td style="text-align:center">是</td><td style="text-align:center">顾客的联系名</td></tr><tr><td style="text-align:center">cust_email</td><td style="text-align:center">char(255)</td><td style="text-align:center">是</td><td style="text-align:center">顾客Email</td></tr></tbody></table><p>&nbsp;&nbsp;<br>表4 orders（订单表）</p><table><thead><tr><th style="text-align:center">属性名</th><th style="text-align:center">数据类型</th><th style="text-align:center">可否为空</th><th style="text-align:center">含 义</th></tr></thead><tbody><tr><td style="text-align:center">order_num</td><td style="text-align:center">int(11)</td><td style="text-align:center">否</td><td style="text-align:center">唯一订单号</td></tr><tr><td style="text-align:center">order_date</td><td style="text-align:center">datetime(0)</td><td style="text-align:center">否</td><td style="text-align:center">订单日期</td></tr><tr><td style="text-align:center">cust_id</td><td style="text-align:center">int(11)</td><td style="text-align:center">否</td><td style="text-align:center">订单顾客ID</td></tr></tbody></table><p>&nbsp;&nbsp;<br>表5 orderitems（订单详情表）</p><table><thead><tr><th style="text-align:center">属性名</th><th style="text-align:center">数据类型</th><th style="text-align:center">可否为空</th><th style="text-align:center">含 义</th></tr></thead><tbody><tr><td style="text-align:center">order_num</td><td style="text-align:center">int(11)</td><td style="text-align:center">否</td><td style="text-align:center">订单号</td></tr><tr><td style="text-align:center">order_item</td><td style="text-align:center">int(11)</td><td style="text-align:center">否</td><td style="text-align:center">订单物品号</td></tr><tr><td style="text-align:center">prod_id</td><td style="text-align:center">char(10)</td><td style="text-align:center">否</td><td style="text-align:center">产品ID</td></tr><tr><td style="text-align:center">quantity</td><td style="text-align:center">int(11)</td><td style="text-align:center">否</td><td style="text-align:center">物品数量</td></tr><tr><td style="text-align:center">item_price</td><td style="text-align:center">datetime(8)</td><td style="text-align:center">否</td><td style="text-align:center">物品价格</td></tr></tbody></table><p>&nbsp;&nbsp;<br>表6 productnotes（产品注释表）</p><table><thead><tr><th style="text-align:center">属性名</th><th style="text-align:center">数据类型</th><th style="text-align:center">可否为空</th><th style="text-align:center">含 义</th></tr></thead><tbody><tr><td style="text-align:center">note_id</td><td style="text-align:center">int(11)</td><td style="text-align:center">否</td><td style="text-align:center">唯一注释ID</td></tr><tr><td style="text-align:center">prod_id</td><td style="text-align:center">char(10)</td><td style="text-align:center">否</td><td style="text-align:center">产品ID</td></tr><tr><td style="text-align:center">note_date</td><td style="text-align:center">datetime(8)(0)</td><td style="text-align:center">否</td><td style="text-align:center">增加注释的日期</td></tr><tr><td style="text-align:center">note_text</td><td style="text-align:center">text(11)</td><td style="text-align:center">是</td><td style="text-align:center">注释文本</td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java学习笔记之JDBC</title>
      <link href="/2018/05/28/PracticeJDBC/"/>
      <url>/2018/05/28/PracticeJDBC/</url>
      <content type="html"><![CDATA[<h1 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h1><p>Jdbc(java database connectivity):Java数据库连接，就是用Java语言来操作数据库。原来我们操作数据库是在控制台中通过sql语句来操作数据库，而Jdbc是用Java语言来向数据库发送sql语句来操作数据库。<br><a id="more"></a></p><h1 id="2-流程"><a href="#2-流程" class="headerlink" title="2.流程"></a>2.流程</h1><h2 id="2-1得到Connection对象"><a href="#2-1得到Connection对象" class="headerlink" title="2.1得到Connection对象"></a>2.1得到Connection对象</h2><ul><li>1.导jar包。mysql-connector-java jar</li><li>2.加载驱动类:Class.forName(“类名”);</li><li>3.给出url、username、password等参数。</li><li>4.使用DriverManager类来的到Connection对象。</li></ul><h3 id="时刻牢记Jdbc中的四大参数"><a href="#时刻牢记Jdbc中的四大参数" class="headerlink" title="时刻牢记Jdbc中的四大参数:"></a>时刻牢记Jdbc中的四大参数:</h3><ul><li>driverClassName:com.mysql.jdbc.Driver</li><li>url:jdbc:mysql://localhost:3306/数据库名</li><li>username:mysql用户名</li><li>password:mysql密码</li></ul><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException,SQLException</span>&#123;</span><br><span class="line"></span><br><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);<span class="comment">//加载驱动类。</span></span><br><span class="line">String url=<span class="string">"jdbc:mysql://localhost:3306/数据库名"</span>;</span><br><span class="line">String username=<span class="string">"root"</span>;</span><br><span class="line">String password=<span class="string">"1234"</span>;</span><br><span class="line"></span><br><span class="line">Connection con=DriverManager.getConnection(url,username,password);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析:"></a>代码分析:</h3><p>1.url的格式为–jdbc:厂商名称:子协议(由厂商自己来规定)。对于mysql而言，它的子协议结构的格式为://localhost:3306/数据库名。<br>2.出现SQLException的原因:1.url username password 是否正确。2.检查是否打开了sql服务器<br>3.出现ClassNotFoundException的原因:1.没导入驱动包。2.Class.forName()传入的字符串参数错误。</p><h1 id="3-Jdbc对数据库进行增、删、改、查"><a href="#3-Jdbc对数据库进行增、删、改、查" class="headerlink" title="3.Jdbc对数据库进行增、删、改、查"></a>3.Jdbc对数据库进行增、删、改、查</h1><h2 id="3-1创建mysql数据库"><a href="#3-1创建mysql数据库" class="headerlink" title="3.1创建mysql数据库"></a>3.1创建mysql数据库</h2><p>创建订单表：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS `orders`;</span><br><span class="line">CREATE TABLE `orders` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `user_id` int(11) NOT NULL COMMENT &apos;下单用户id&apos;,</span><br><span class="line">  `number` varchar(32) NOT NULL COMMENT &apos;订单号&apos;,</span><br><span class="line">  `createtime` datetime NOT NULL COMMENT &apos;创建订单时间&apos;,</span><br><span class="line">  `note` varchar(100) DEFAULT NULL COMMENT &apos;备注&apos;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  KEY `FK_orders_1` (`user_id`),</span><br><span class="line">  CONSTRAINT `FK_orders_id` FOREIGN KEY (`user_id`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure></p><p>插入订单表数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `orders` VALUES (&apos;3&apos;, &apos;1&apos;, &apos;1000010&apos;, &apos;2015-02-04 13:22:35&apos;, null);</span><br><span class="line">INSERT INTO `orders` VALUES (&apos;4&apos;, &apos;1&apos;, &apos;1000011&apos;, &apos;2015-02-03 13:22:41&apos;, null);</span><br><span class="line">INSERT INTO `orders` VALUES (&apos;5&apos;, &apos;10&apos;, &apos;1000012&apos;, &apos;2015-02-12 16:13:23&apos;, null);</span><br></pre></td></tr></table></figure></p><p>创建用户表:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS `user`;</span><br><span class="line">CREATE TABLE `user` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `username` varchar(32) NOT NULL COMMENT &apos;用户名称&apos;,</span><br><span class="line">  `birthday` date DEFAULT NULL COMMENT &apos;生日&apos;,</span><br><span class="line">  `sex` char(1) DEFAULT NULL COMMENT &apos;性别&apos;,</span><br><span class="line">  `address` varchar(256) DEFAULT NULL COMMENT &apos;地址&apos;,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=27 DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure></p><p>插入用户表数据:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `user` VALUES (&apos;1&apos;, &apos;王五&apos;, null, &apos;2&apos;, null);</span><br><span class="line">INSERT INTO `user` VALUES (&apos;10&apos;, &apos;张三&apos;, &apos;2014-07-10&apos;, &apos;1&apos;, &apos;北京市&apos;);</span><br><span class="line">INSERT INTO `user` VALUES (&apos;16&apos;, &apos;张小明&apos;, null, &apos;1&apos;, &apos;河南郑州&apos;);</span><br><span class="line">INSERT INTO `user` VALUES (&apos;22&apos;, &apos;陈小明&apos;, null, &apos;1&apos;, &apos;河南郑州&apos;);</span><br><span class="line">INSERT INTO `user` VALUES (&apos;24&apos;, &apos;张三丰&apos;, null, &apos;1&apos;, &apos;河南郑州&apos;);</span><br><span class="line">INSERT INTO `user` VALUES (&apos;25&apos;, &apos;陈小明&apos;, null, &apos;1&apos;, &apos;河南郑州&apos;);</span><br><span class="line">INSERT INTO `user` VALUES (&apos;26&apos;, &apos;王五&apos;, null, null, null);</span><br></pre></td></tr></table></figure></p><p>订单表如图：<br><figure class="image-box">                <img src="http://owtr5yq3h.bkt.clouddn.com/%E8%AE%A2%E5%8D%95%E8%A1%A8%E6%88%AA%E5%9B%BE.png" alt="订单表" title="" class="">                <p>订单表</p>            </figure></p><p>用户表如图：<br><figure class="image-box">                <img src="http://owtr5yq3h.bkt.clouddn.com/%E7%94%A8%E6%88%B7%E8%A1%A8%E6%88%AA%E5%9B%BE.png" alt="用户表" title="" class="">                <p>用户表</p>            </figure></p><h1 id="4-创建项目"><a href="#4-创建项目" class="headerlink" title="4.创建项目"></a>4.创建项目</h1><p>开发环境：Intellij IDEA JDK1.8</p><h3 id="4-1-创建一个java项目"><a href="#4-1-创建一个java项目" class="headerlink" title="4.1 创建一个java项目"></a>4.1 创建一个java项目</h3><h3 id="4-2-导入jar包，需要mysql的数据库驱动"><a href="#4-2-导入jar包，需要mysql的数据库驱动" class="headerlink" title="4.2 导入jar包，需要mysql的数据库驱动"></a>4.2 导入jar包，需要mysql的<a href="http://mvnrepository.com/artifact/mysql/mysql-connector-java" target="_blank" rel="noopener">数据库驱动</a></h3><figure class="image-box">                <img src="http://owtr5yq3h.bkt.clouddn.com/jar%E5%8C%85.png" alt="数据库驱动" title="" class="">                <p>数据库驱动</p>            </figure><h3 id="4-3-jdbc编程步骤："><a href="#4-3-jdbc编程步骤：" class="headerlink" title="4.3    jdbc编程步骤："></a>4.3    jdbc编程步骤：</h3><ul><li>1.加载数据库驱动</li><li>2.创建并获取数据库链接</li><li>3.创建jdbc statement对象</li><li>4.设置sql语句</li><li>5.设置sql语句中的参数(使用preparedStatement)</li><li>6.通过statement执行sql并获取结果</li><li>7.对sql执行结果进行解析处理</li><li>8.释放资源(resultSet、preparedstatement、connection)</li></ul><h3 id="4-4-jdbc程序"><a href="#4-4-jdbc程序" class="headerlink" title="4.4 jdbc程序"></a>4.4 jdbc程序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection connection=<span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement preparedStatement = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet resultSet = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//加载数据库驱动</span></span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//通过驱动管理类获取数据库链接</span></span><br><span class="line">            connection =  DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/sqlpractice?characterEncoding=utf-8"</span>, <span class="string">"root"</span>, <span class="string">"1234"</span>);</span><br><span class="line">            <span class="comment">//定义sql语句 ?表示占位符</span></span><br><span class="line">            String sql = <span class="string">"select * from user where username = ?"</span>;</span><br><span class="line">            <span class="comment">//获取预处理statement</span></span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//设置参数，第一个参数为sql语句中参数的序号（从1开始），第二个参数为设置的参数值</span></span><br><span class="line">            preparedStatement.setString(<span class="number">1</span>, <span class="string">"王五"</span>);</span><br><span class="line">            <span class="comment">//向数据库发出sql执行查询，查询出结果集</span></span><br><span class="line">            resultSet =  preparedStatement.executeQuery();</span><br><span class="line">            <span class="comment">//遍历查询结果集</span></span><br><span class="line">            <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">                System.out.println(resultSet.getString(<span class="string">"id"</span>)+<span class="string">"  "</span>+resultSet.getString(<span class="string">"username"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="comment">//释放资源</span></span><br><span class="line">            <span class="keyword">if</span>(resultSet!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    resultSet.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(preparedStatement!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    preparedStatement.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>:上述中出现的Connection和Statement都应该导入java.mysql下的包，而不是java.jdbc下的包。<br>执行结果:<br><figure class="image-box">                <img src="http://owtr5yq3h.bkt.clouddn.com/jdbc%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C.png" alt="执行结果" title="" class="">                <p>执行结果</p>            </figure><br>上边使用jdbc的原始方法（未经封装）实现了查询数据库表记录的操作。</p><h3 id="4-5jdbc问题总结"><a href="#4-5jdbc问题总结" class="headerlink" title="4.5jdbc问题总结"></a>4.5jdbc问题总结</h3><ul><li>1.数据库链接创建、释放频繁造成系统资源浪费从而影响系统性能，如果使用数据库链接池可解决此问题。</li><li>2.Sql语句在代码中硬编码，造成代码不易维护，实际应用sql变化的可能较大，sql变动需要改变java代码。</li><li>3.使用preparedStatement向占有位符号传参数存在硬编码，因为sql语句的where条件不一定，可能多也可能少，修改sql还要修改代码，系统不易维护。</li><li>4.对结果集解析存在硬编码（查询列名），sql变化导致解析代码变化，系统不易维护，如果能将数据库记录封装成pojo对象解析比较方便。</li></ul>]]></content>
      
      <categories>
          
          <category> jdbc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdbc </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>初识MyBatis</title>
      <link href="/2018/05/28/PracticeMyBatis/"/>
      <url>/2018/05/28/PracticeMyBatis/</url>
      <content type="html"><![CDATA[<p>首先我要明确告诉大家的是MyBatis是一个java持久层框架，以前我们都是用jdbc来将我们的java程序与数据库相连接，而MyBatis是对jdbc的一个封装。<br><a id="more"></a></p><h2 id="1-MyBatis框架的引入"><a href="#1-MyBatis框架的引入" class="headerlink" title="1.MyBatis框架的引入"></a>1.MyBatis框架的引入</h2><p>我们来看看传统的编程方式中使用jdbc的问题:</p><ul><li>1.数据库链接创建、释放频繁造成系统资源浪费从而影响系统性能，如果使用数据库链接池可解决此问题。<br><strong>解决</strong>:在SqlMapConfig.xml中配置数据链接池，使用连接池管理数据库链接。</li><li>2.Sql语句写在代码中造成代码不易维护，实际应用sql变化的可能较大，sql变动需要改变java代码。<br><strong>解决</strong>：将Sql语句配置在XXXXmapper.xml文件中与java代码分离。</li><li>3.向sql语句传参数麻烦，因为sql语句的where条件不一定，可能多也可能少，占位符需要和参数一一对应。<br><strong>解决</strong>:Mybatis自动将java对象映射至sql语句，通过statement中的parameterType定义输入参数的类型。</li><li>4.对结果集解析麻烦，sql变化导致解析代码变化，且解析前需要遍历，如果能将数据库记录封装成pojo对象解析比较方便。<br><strong>解决</strong>:Mybatis自动将sql执行结果映射至java对象，通过statement中的resultType定义输出结果的类型。</li></ul><h2 id="2-MyBatis介绍"><a href="#2-MyBatis介绍" class="headerlink" title="2.MyBatis介绍"></a>2.MyBatis介绍</h2><p>MyBatis 本是apache的一个开源项目iBatis, 2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis。2013年11月迁移到Github。 </p><p>MyBatis是一个优秀的持久层框架，它对jdbc的操作数据库的过程进行封装，使开发者只需要关注SQL本身，而不需要花费精力去处理例如注册驱动、创建connection、创建statement、手动设置参数、结果集检索等jdbc繁杂的过程代码。</p><p>Mybatis通过xml或注解的方式将要执行的各种statement（statement、preparedStatement、CallableStatement）配置起来，并通过java对象和statement中的sql进行映射生成最终执行的sql语句，最后由mybatis框架执行sql并将结果映射成java对象并返回。</p><h2 id="3-Mybatis架构"><a href="#3-Mybatis架构" class="headerlink" title="3.Mybatis架构"></a>3.Mybatis架构</h2><figure class="image-box">                <img src="http://owtr5yq3h.bkt.clouddn.com/mybatis%E6%9E%B6%E6%9E%84.png" alt="MyBatis架构" title="" class="">                <p>MyBatis架构</p>            </figure><ul><li>1.MyBatis配置<br>SqlMapConfig.xml，此文件作为mybatis的全局配置文件，配置了mybatis的运行环境等信息。<br>mapper.xml文件即sql映射文件，文件中配置了操作数据库的sql语句。此文件需要在SqlMapConfig.xml中加载。</li><li>2.通过mybatis环境等配置信息构造SqlSessionFactory即会话工厂</li><li>3.由会话工厂创建sqlSession即会话，操作数据库需要通过sqlSession进行。</li><li>4.mybatis底层自定义了Executor执行器接口操作数据库，Executor接口有两个实现，一个是基本执行器、一个是缓存执行器。</li><li>5.Mapped Statement也是mybatis一个底层封装对象，它包装了mybatis配置信息及sql映射信息等。mapper.xml文件中一个sql对应一个Mapped Statement对象，sql的id即是Mapped statement的id。</li><li>6.Mapped Statement对sql执行输入参数进行定义，包括HashMap、基本类型、pojo，Executor通过Mapped Statement在执行sql前将输入的java对象映射至sql中，输入参数映射就是jdbc编程中对preparedStatement设置参数。</li><li>7.Mapped Statement对sql执行输出结果进行定义，包括HashMap、基本类型、pojo，Executor通过Mapped Statement在执行sql后将输出结果映射至java对象中，输出结果映射过程相当于jdbc编程中对结果的解析处理过程。</li></ul><h2 id="4-Mybatis入门程序"><a href="#4-Mybatis入门程序" class="headerlink" title="4.Mybatis入门程序"></a>4.Mybatis入门程序</h2><h3 id="4-1准备开发环境"><a href="#4-1准备开发环境" class="headerlink" title="4.1准备开发环境"></a>4.1准备开发环境</h3><p>1.创建测试项目，普通java项目或是web项目皆可</p><p>2.导入jar包:<br><figure class="image-box">                <img src="http://owtr5yq3h.bkt.clouddn.com/MyBatis%E6%89%80%E9%9C%80jar%E5%8C%85.png" alt="所需jar包" title="" class="">                <p>所需jar包</p>            </figure><br>3.创建数据库和相应的表,SQL脚本如下:<br>创建User表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS `user`;</span><br><span class="line">CREATE TABLE `user` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `username` varchar(32) NOT NULL COMMENT &apos;用户名称&apos;,</span><br><span class="line">  `birthday` date DEFAULT NULL COMMENT &apos;生日&apos;,</span><br><span class="line">  `sex` char(1) DEFAULT NULL COMMENT &apos;性别&apos;,</span><br><span class="line">  `address` varchar(256) DEFAULT NULL COMMENT &apos;地址&apos;,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=27 DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure></p><p>插入数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `user` VALUES (&apos;1&apos;, &apos;王五&apos;, null, &apos;2&apos;, null);</span><br><span class="line">INSERT INTO `user` VALUES (&apos;10&apos;, &apos;张三&apos;, &apos;2014-07-10&apos;, &apos;1&apos;, &apos;北京市&apos;);</span><br><span class="line">INSERT INTO `user` VALUES (&apos;16&apos;, &apos;张小明&apos;, null, &apos;1&apos;, &apos;河南郑州&apos;);</span><br><span class="line">INSERT INTO `user` VALUES (&apos;22&apos;, &apos;陈小明&apos;, null, &apos;1&apos;, &apos;河南郑州&apos;);</span><br><span class="line">INSERT INTO `user` VALUES (&apos;24&apos;, &apos;张三丰&apos;, null, &apos;1&apos;, &apos;河南郑州&apos;);</span><br><span class="line">INSERT INTO `user` VALUES (&apos;25&apos;, &apos;陈小明&apos;, null, &apos;1&apos;, &apos;河南郑州&apos;);</span><br><span class="line">INSERT INTO `user` VALUES (&apos;26&apos;, &apos;王五&apos;, null, null, null);</span><br></pre></td></tr></table></figure></p><p>创建Orders表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS `orders`;</span><br><span class="line">CREATE TABLE `orders` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `user_id` int(11) NOT NULL COMMENT &apos;下单用户id&apos;,</span><br><span class="line">  `number` varchar(32) NOT NULL COMMENT &apos;订单号&apos;,</span><br><span class="line">  `createtime` datetime NOT NULL COMMENT &apos;创建订单时间&apos;,</span><br><span class="line">  `note` varchar(100) DEFAULT NULL COMMENT &apos;备注&apos;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  KEY `FK_orders_1` (`user_id`),</span><br><span class="line">  CONSTRAINT `FK_orders_id` FOREIGN KEY (`user_id`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure></p><p>插入数据:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `orders` VALUES (&apos;3&apos;, &apos;1&apos;, &apos;1000010&apos;, &apos;2015-02-04 13:22:35&apos;, null);</span><br><span class="line">INSERT INTO `orders` VALUES (&apos;4&apos;, &apos;1&apos;, &apos;1000011&apos;, &apos;2015-02-03 13:22:41&apos;, null);</span><br><span class="line">INSERT INTO `orders` VALUES (&apos;5&apos;, &apos;10&apos;, &apos;1000012&apos;, &apos;2015-02-12 16:13:23&apos;, null);</span><br></pre></td></tr></table></figure></p><p>4.创建日志文件<br>在classpath下创建log4j.properties如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Global logging configuration</span><br><span class="line">log4j.rootLogger=DEBUG, stdout</span><br><span class="line"># Console output...</span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n</span><br></pre></td></tr></table></figure></p><p>mybatis默认使用log4j作为输出日志信息。</p><p>5.创建MyBatis核心配置文件 - SqlMapConfig.xml<br>在classpath下创建SqlMapConfig.xml，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!-- 和spring整合后 environments配置将废除--&gt;</span><br><span class="line">    &lt;environments default=&quot;development&quot;&gt;</span><br><span class="line">        &lt;environment id=&quot;development&quot;&gt;</span><br><span class="line">            &lt;!-- 使用jdbc事务管理--&gt;</span><br><span class="line">            &lt;transactionManager type=&quot;JDBC&quot; /&gt;</span><br><span class="line">            &lt;!-- 数据库连接池--&gt;</span><br><span class="line">            &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;</span><br><span class="line">                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/sqlpractice?characterEncoding=utf-8&quot; /&gt;</span><br><span class="line">                &lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt;</span><br><span class="line">                &lt;property name=&quot;password&quot; value=&quot;1234&quot; /&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line">    &lt;!--加载映射文件--&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=&quot;MyBatis/SqlMap/User.xml&quot;/&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p><p><strong>SqlMapConfig.xml是mybatis核心配置文件，上边文件的配置内容为数据源、事务管理。</strong></p><p>6.创建实体类(PO)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class User &#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String username; //用户姓名</span><br><span class="line">    private String sex;  //性别</span><br><span class="line">    private Date birthday; //生日</span><br><span class="line">    private String address; //地址</span><br><span class="line">    //此处省略Get/Set/ToString方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>7.创建Sql映射文件<br>在classpath下的sqlmap目录下创建sql映射文件Users.xml：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;test&quot;&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></p><p>namespace ：命名空间，用于隔离sql语句，后面会讲另一层非常重要的作用。<br>8.加载映射文件<br>mybatis框架需要加载映射文件，将Users.xml添加在SqlMapConfig.xml，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;mappers&gt;</span><br><span class="line">    &lt;mapper resource=&quot;MyBatis/SqlMaUser.xml&quot;/&gt;</span><br><span class="line">&lt;/mappers&gt;</span><br></pre></td></tr></table></figure></p><p>到此，环境搭建以及配置告一段落，目录结构如下：<br><figure class="image-box">                <img src="http://owtr5yq3h.bkt.clouddn.com/%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt="目录结构" title="" class="">                <p>目录结构</p>            </figure></p><h3 id="4-2根据ID查询用户信息"><a href="#4-2根据ID查询用户信息" class="headerlink" title="4.2根据ID查询用户信息"></a>4.2根据ID查询用户信息</h3><h4 id="1-在映射文件-user-xml-中添加"><a href="#1-在映射文件-user-xml-中添加" class="headerlink" title="1.在映射文件(user.xml)中添加"></a>1.在映射文件(user.xml)中添加</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--根据ID获取用户信息--&gt;</span><br><span class="line">    &lt;select id=&quot;findUserById&quot; parameterType=&quot;int&quot; resultType=&quot;MyBatis.po.User&quot;&gt;</span><br><span class="line">        SELECT * FROM USER WHERE id=#&#123;id&#125;;</span><br><span class="line">    &lt;/select&gt;</span><br></pre></td></tr></table></figure><p><code>parameterType</code>：定义输入到sql中的映射类型，#{id}表示使用preparedstatement设置占位符号并将输入变量id传到sql。<br><code>resultType</code>：定义结果映射类型。</p><h4 id="2-编写测试类进行测试"><a href="#2-编写测试类进行测试" class="headerlink" title="2.编写测试类进行测试"></a>2.编写测试类进行测试</h4><figure class="image-box">                <img src="http://owtr5yq3h.bkt.clouddn.com/%E6%A0%B9%E6%8D%AEID%E6%9F%A5%E6%89%BE%E7%94%A8%E6%88%B7.png" alt="根据ID查找用户" title="" class="">                <p>根据ID查找用户</p>            </figure><p><strong>注意</strong>:测试采用junit来编写的测试类。输出结果如下:</p><figure class="image-box">                <img src="http://owtr5yq3h.bkt.clouddn.com/%E6%A0%B9%E6%8D%AEID%E6%9F%A5%E6%89%BE%E7%94%A8%E6%88%B7%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C.png" alt="" title="" class="">                <p></p>            </figure><h3 id="4-3根据用户名查询用户信息"><a href="#4-3根据用户名查询用户信息" class="headerlink" title="4.3根据用户名查询用户信息"></a>4.3根据用户名查询用户信息</h3><h4 id="1-在映射文件-user-xml-中添加-1"><a href="#1-在映射文件-user-xml-中添加-1" class="headerlink" title="1.在映射文件(user.xml)中添加"></a>1.在映射文件(user.xml)中添加</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--根据用户名获取用户信息--&gt;</span><br><span class="line">   &lt;select id=&quot;findUserByUsername&quot; parameterType=&quot;java.lang.String&quot; resultType=&quot;MyBatis.po.User&quot;&gt;</span><br><span class="line">       select * from USER WHERE username LIKE &apos;%$&#123;value&#125;%&apos;;</span><br><span class="line">   &lt;/select&gt;</span><br></pre></td></tr></table></figure><p><code>parameterType</code>：定义输入到sql中的映射类型，${value}表示使用参数将${value}替换，做字符串的拼接。<br>注意：如果是取简单数量类型的参数，括号中的值必须为value<br><code>resultType</code>：定义结果映射类型。</p><p>此时，我们在传入参数的地方不再使用占位符<code>#{}</code>而是使用<code>${}</code>，二者区别如下:</p><ul><li><code>#{}</code>表示一个占位符号，通过#{}可以实现preparedStatement向占位符中设置值，自动进行java类型和jdbc类型转换，#{}可以有效防止sql注入。 #{}可以接收简单类型值或pojo属性值。 如果parameterType传输单个简单类型值，#{}括号中可以是value或其它名称。</li><li><code>${}</code>表示拼接sql串，通过<code>${}</code>可以将ParameterType 传入的内容拼接在sql中且不进行jdbc类型转换， <code>${}</code>可以接收简单类型值或pojo属性值，如果parameterType传输单个简单类型值，${}括号中只能是value。</li></ul><h4 id="2-编写测试类进行测试-1"><a href="#2-编写测试类进行测试-1" class="headerlink" title="2.编写测试类进行测试"></a>2.编写测试类进行测试</h4><figure class="image-box">                <img src="http://owtr5yq3h.bkt.clouddn.com/%E6%A0%B9%E6%8D%AE%E7%94%A8%E6%88%B7%E5%90%8D%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF.png" alt="根据用户名模糊查询用户信息" title="" class="">                <p>根据用户名模糊查询用户信息</p>            </figure><p>输出结果：</p><figure class="image-box">                <img src="http://owtr5yq3h.bkt.clouddn.com/%E6%A0%B9%E6%8D%AE%E7%94%A8%E6%88%B7%E5%90%8D%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C.png" alt="输出结果" title="" class="">                <p>输出结果</p>            </figure><h3 id="4-4添加用户-并返回主键"><a href="#4-4添加用户-并返回主键" class="headerlink" title="4.4添加用户,并返回主键"></a>4.4添加用户,并返回主键</h3><h4 id="1-在映射文件-user-xml-中添加-2"><a href="#1-在映射文件-user-xml-中添加-2" class="headerlink" title="1.在映射文件(user.xml)中添加"></a>1.在映射文件(user.xml)中添加</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--添加用户,并返回主键--&gt;</span><br><span class="line">   &lt;insert id=&quot;insertUser&quot; parameterType=&quot;MyBatis.po.User&quot;&gt;</span><br><span class="line">       &lt;!-- selectKey将主键返回，需要再返回 --&gt;</span><br><span class="line">       &lt;selectKey keyProperty=&quot;id&quot; order=&quot;AFTER&quot; resultType=&quot;java.lang.Integer&quot;&gt;</span><br><span class="line">           select LAST_INSERT_ID()</span><br><span class="line">       &lt;/selectKey&gt;</span><br><span class="line">     INSERT INTO USER (username,birthday,sex,address) VALUES (#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;);</span><br><span class="line">   &lt;/insert&gt;</span><br></pre></td></tr></table></figure><p><strong>添加selectKey实现将主键返回</strong><br><code>keyProperty</code>:返回的主键存储在pojo中的哪个属性<br><code>order</code>：selectKey的执行顺序，是相对与insert语句来说，由于mysql的自增原理执行完insert语句之后才将主键生成，所以这里selectKey的执行顺序为<code>after</code><br><code>resultType</code>:返回的主键是什么类型<br><code>LAST_INSERT_ID()</code>:是mysql的函数，返回auto_increment自增列新记录id值。</p><p><strong>拓展</strong>:Mysql使用 uuid实现主键<br>需要增加通过select uuid()得到uuid值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;insert  id=&quot;insertUser&quot; parameterType=&quot;MyBatis.po.User&quot;&gt;</span><br><span class="line">&lt;selectKey resultType=&quot;java.lang.String&quot; order=&quot;BEFORE&quot; </span><br><span class="line">keyProperty=&quot;id&quot;&gt;</span><br><span class="line">select uuid()</span><br><span class="line">&lt;/selectKey&gt;</span><br><span class="line">insert into user(id,username,birthday,sex,address) </span><br><span class="line"> values(#&#123;id&#125;,#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;)</span><br><span class="line">&lt;/insert&gt;</span><br><span class="line">//注意这里使用的order是“BEFORE”</span><br></pre></td></tr></table></figure></p><h4 id="2-编写测试类进行测试-2"><a href="#2-编写测试类进行测试-2" class="headerlink" title="2.编写测试类进行测试"></a>2.编写测试类进行测试</h4><figure class="image-box">                <img src="http://owtr5yq3h.bkt.clouddn.com/%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7%E5%B9%B6%E8%BF%94%E5%9B%9E%E4%B8%BB%E9%94%AE.png" alt="添加用户并返回主键" title="" class="">                <p>添加用户并返回主键</p>            </figure><p>输出结果：<br><figure class="image-box">                <img src="http://owtr5yq3h.bkt.clouddn.com/%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7%E5%B9%B6%E8%BF%94%E5%9B%9E%E4%B8%BB%E9%94%AE%E8%BE%93%E5%87%BA.png" alt="输出结果" title="" class="">                <p>输出结果</p>            </figure></p><h3 id="4-5根据ID删除用户"><a href="#4-5根据ID删除用户" class="headerlink" title="4.5根据ID删除用户"></a>4.5根据ID删除用户</h3><h4 id="1-在映射文件-user-xml-中添加-3"><a href="#1-在映射文件-user-xml-中添加-3" class="headerlink" title="1.在映射文件(user.xml)中添加"></a>1.在映射文件(user.xml)中添加</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--删除用户--&gt;</span><br><span class="line">   &lt;delete id=&quot;deleteUserById&quot; parameterType=&quot;int&quot;&gt;</span><br><span class="line">       DELETE  FROM USER WHERE id=#&#123;id&#125;;</span><br><span class="line">   &lt;/delete&gt;</span><br></pre></td></tr></table></figure><h4 id="2-编写测试类进行测试-3"><a href="#2-编写测试类进行测试-3" class="headerlink" title="2.编写测试类进行测试"></a>2.编写测试类进行测试</h4><figure class="image-box">                <img src="http://owtr5yq3h.bkt.clouddn.com/%E6%A0%B9%E6%8D%AEID%E5%88%A0%E9%99%A4%E7%94%A8%E6%88%B7.png" alt="删除用户" title="" class="">                <p>删除用户</p>            </figure><p>运行程序后便可发现数据库中的该数据已被删除。</p><h3 id="4-6更新用户"><a href="#4-6更新用户" class="headerlink" title="4.6更新用户"></a>4.6更新用户</h3><h4 id="1-在映射文件-user-xml-中添加-4"><a href="#1-在映射文件-user-xml-中添加-4" class="headerlink" title="1.在映射文件(user.xml)中添加"></a>1.在映射文件(user.xml)中添加</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--更新用户--&gt;</span><br><span class="line">   &lt;update id=&quot;updateUser&quot; parameterType=&quot;MyBatis.po.User&quot;&gt;</span><br><span class="line">     UPDATE USER SET username=#&#123;username&#125;,birthday=#&#123;birthday&#125;,sex=#&#123;sex&#125;,address=#&#123;address&#125; where id=#&#123;id&#125;;</span><br><span class="line">   &lt;/update&gt;</span><br></pre></td></tr></table></figure><h4 id="2-编写测试类进行测试-4"><a href="#2-编写测试类进行测试-4" class="headerlink" title="2.编写测试类进行测试"></a>2.编写测试类进行测试</h4><figure class="image-box">                <img src="http://owtr5yq3h.bkt.clouddn.com/%E6%9B%B4%E6%96%B0%E7%94%A8%E6%88%B7.png" alt="更新用户" title="" class="">                <p>更新用户</p>            </figure><p>运行程序后便可发现数据库中的该数据已被更新。</p><h2 id="5-小结"><a href="#5-小结" class="headerlink" title="5.小结"></a>5.小结</h2><h3 id="5-1-parameterType和resultType"><a href="#5-1-parameterType和resultType" class="headerlink" title="5.1 parameterType和resultType"></a>5.1 parameterType和resultType</h3><ul><li>parameterType：指定输入参数类型，mybatis通过ognl从输入对象中获取参数值拼接在sql中。</li><li>resultType：指定输出结果类型，mybatis将sql查询结果的一行记录数据映射为resultType指定类型的对象。</li></ul>]]></content>
      
      <categories>
          
          <category> mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MyBatis输入映射和输出映射</title>
      <link href="/2018/05/28/MyBatisMappered/"/>
      <url>/2018/05/28/MyBatisMappered/</url>
      <content type="html"><![CDATA[<p>在MyBatis中，我们通过parameterType完成输入映射(指将值映射到sql语句的占位符中，值的类型与dao层响应方法的参数类型一致)，通过resultType完成输出映射(从数据库中输出，通过dao层的方法查询到的数据输出到pojo对象中)。 注意输入与输出都是相对于数据库的。接下来我们先谈谈输入映射。工程目录结构如下:<br><a id="more"></a><br><figure class="image-box">                <img src="http://owtr5yq3h.bkt.clouddn.com/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt="目录结构" title="" class="">                <p>目录结构</p>            </figure></p><h3 id="1-输入映射parameterType"><a href="#1-输入映射parameterType" class="headerlink" title="1.输入映射parameterType"></a>1.输入映射parameterType</h3><p>通过parameterType传入简单类型或对象，我们之前讲过了，接下来我们要讲的是parameterType传递pojo包装对象。可以定义pojo包装类型扩展mapper接口输入参数的内容。pojo对象Mybatis使用ognl表达式解析对象字段的值，#{}或者${}括号中的值为pojo属性名称。</p><p>我们在pojo包下创建User类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">private</span> String username;<span class="comment">// 用户姓名</span></span><br><span class="line"><span class="keyword">private</span> String sex;<span class="comment">// 性别</span></span><br><span class="line"><span class="keyword">private</span> Date birthday;<span class="comment">// 生日</span></span><br><span class="line"><span class="keyword">private</span> String address;<span class="comment">// 地址</span></span><br><span class="line"><span class="comment">//此处省略Get/Set/ToString方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>创建QueryVo类，用于对User属性进行拓展<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryVo</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> User user;</span><br><span class="line"><span class="comment">//此处省略Get/Set/ToString方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>UserMapper.xml中添加如下配置信息:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserbyVo"</span> <span class="attr">parameterType</span>=<span class="string">"cn.liuyu.pojo.QueryVo"</span> <span class="attr">resultType</span>=<span class="string">"cn.liuyu.pojo.User"</span>&gt;</span></span><br><span class="line">    select * from user where username like '%$&#123;user.username&#125;%' and sex=#&#123;user.sex&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>UserMapper.java中添加方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUserbyVo</span><span class="params">(QueryVo vo)</span></span>;</span><br></pre></td></tr></table></figure></p><p>先在测试类初始化会话工厂<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> SqlSessionFactory factory;</span><br><span class="line"><span class="comment">//作用:在测试方法前执行这个方法</span></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">String resource = <span class="string">"SqlMapConfig.xml"</span>;</span><br><span class="line"><span class="comment">//通过流将核心配置文件读取进来</span></span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="comment">//通过核心配置文件输入流来创建会话工厂</span></span><br><span class="line">factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后便可以进行测试:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindUserByVo</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">SqlSession openSession = factory.openSession();</span><br><span class="line"><span class="comment">//通过getMapper方法来实例化接口</span></span><br><span class="line">UserMapper mapper = openSession.getMapper(UserMapper.class);</span><br><span class="line">QueryVo vo = <span class="keyword">new</span> QueryVo();</span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setUsername(<span class="string">"王"</span>);</span><br><span class="line">user.setSex(<span class="string">"2"</span>);</span><br><span class="line">vo.setUser(user);</span><br><span class="line">List&lt;User&gt; list = mapper.findUserbyVo(vo);</span><br><span class="line">System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-输出映射-resultType和resultMap"><a href="#2-输出映射-resultType和resultMap" class="headerlink" title="2.输出映射(resultType和resultMap)"></a>2.输出映射(resultType和resultMap)</h3><p>输出映射有resultType和resultMap,他们都是指定输出结果的类型(pojo、简单类型、hashmap…)，并将sql查询结果映射为java对象 。</p><h4 id="2-1resultType-输出简单类型"><a href="#2-1resultType-输出简单类型" class="headerlink" title="2.1resultType(输出简单类型)"></a>2.1resultType(输出简单类型)</h4><p>UserMapper.xml文件中添加如下配置:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 只有返回结果为一行一列的时候,那么返回值类型才可以指定成基本类型 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserCount"</span> <span class="attr">resultType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">    select count(*) from user </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>然后在UserMapper.java中添加如下方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">findUserCount</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></p><p>进行测试：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindUserCount</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">SqlSession openSession = factory.openSession();</span><br><span class="line"><span class="comment">//通过getMapper方法来实例化接口</span></span><br><span class="line">UserMapper mapper = openSession.getMapper(UserMapper.class);</span><br><span class="line">Integer count = mapper.findUserCount();</span><br><span class="line">System.out.println(<span class="string">"====="</span> + count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里因为查询的记录结果集为一条记录且该记录只有1列，所以我们使用的是返回简单类型。</p><p>使用resultType时我们应该注意:sql查询的列名要和resultType指定pojo的属性名相同，指定相同属性方可映射成功，如果sql查询的列名要和resultType指定pojo的属性名全部不相同(或是部分不相同)，则映射到pojo对象中的对应属性为null。例如有时候我们不需要查询select * from user where id = ?而是select username,address _address where id = ? 此时我们给查询的address列名给了一个别名_address，这样我们通过查询表中address的数据然后在将它映射到User对象时，该对象的address属性就为null，即没将从表中查询到的address数据映射到user对象的address属性中。</p><p>此时resultMap就出现了。如果sql查询列名和最终要映射的pojo的属性名不一致，使用resultMap就可以将列名和pojo的属性名做一个对应关系 （列名和属性名映射配置）。</p><h4 id="2-2resultMap"><a href="#2-2resultMap" class="headerlink" title="2.2resultMap"></a>2.2resultMap</h4><p>使用resultMap需要在UserMapper.xml中进行配置:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 一对一:手动映射 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- id标签指定主键字段对应关系</span></span><br><span class="line"><span class="comment">column:列,数据库中的字段名称</span></span><br><span class="line"><span class="comment">property:属性,java中pojo中的属性名称</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userListResultMap"</span> <span class="attr">type</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这个标签指定单个对象的对应关系</span></span><br><span class="line"><span class="comment">property:指定将数据放入Orders中的user属性中</span></span><br><span class="line"><span class="comment">javaType:user属性的类型</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"address"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在UserMapper.xml进行如下配置:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"userListResultMap"</span> <span class="attr">parameterType</span>=<span class="string">"cn.liuyu.pojo.QueryVo"</span> <span class="attr">resultMap</span>=<span class="string">"userListResultMap"</span>&gt;</span></span><br><span class="line">    SELECT id,username,birthday,sex from user where username like '%$&#123;user.username&#125;%'</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>UserMapper.java文件中:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">userListResultMap</span><span class="params">(QueryVo vo)</span></span>;</span><br></pre></td></tr></table></figure></p><p>测试代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindUserListResultMap</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">SqlSession openSession=factory.openSession();</span><br><span class="line"><span class="comment">//通过getMapper方法来实例化接口</span></span><br><span class="line">UserMapper mapper=openSession.getMapper(UserMapper.class);</span><br><span class="line">QueryVo vo=<span class="keyword">new</span> QueryVo();</span><br><span class="line">User user=<span class="keyword">new</span> User();</span><br><span class="line">user.setUsername(<span class="string">"张"</span>);</span><br><span class="line">vo.setUser(user);</span><br><span class="line">List&lt;User&gt; list=mapper.userListResultMap(vo);</span><br><span class="line">System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行测试类发现，即使我们查询的列名与User对象的属性不一样，但是我们的确映射成功了。(ps:这里都是一致的)</p>]]></content>
      
      <categories>
          
          <category> mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MyBatis之Mapper动态代理开发</title>
      <link href="/2018/05/28/MyBatisDao/"/>
      <url>/2018/05/28/MyBatisDao/</url>
      <content type="html"><![CDATA[<h2 id="1-SqlSession的使用范围"><a href="#1-SqlSession的使用范围" class="headerlink" title="1.SqlSession的使用范围"></a>1.SqlSession的使用范围</h2><p>SqlSession中封装了对数据库的操作，如：查询、插入、更新、删除等。<br>通过SqlSessionFactory创建SqlSession，而SqlSessionFactory是通过SqlSessionFactoryBuilder进行创建。<br><a id="more"></a><br><strong>1.SqlSessionFactoryBuilder</strong><br>SqlSessionFactoryBuilder用于创建SqlSessionFacoty，SqlSessionFacoty一旦创建完成就不需要SqlSessionFactoryBuilder了，因为SqlSession是通过SqlSessionFactory生产，所以可以将SqlSessionFactoryBuilder当成一个工具类使用，最佳使用范围是方法范围即方法体内局部变量。<br><strong>2.SqlSessionFactory</strong><br>SqlSessionFactory是一个接口，接口中定义了openSession的不同重载方法，SqlSessionFactory的最佳使用范围是整个应用运行期间，一旦创建后可以重复使用，通常以单例模式管理SqlSessionFactory。<br><strong>3.SqlSession</strong><br>SqlSession是一个面向用户的接口， sqlSession中定义了数据库操作方法。<br>    &nbsp;&nbsp;每个线程都应该有它自己的SqlSession实例。SqlSession的实例不能共享使用，它也是线程不安全的。因此最佳的范围是请求或方法范围。绝对不能将SqlSession实例的引用放在一个类的静态字段或实例字段中。<br>&nbsp;&nbsp;打开一个SqlSession；使用完毕就要关闭它。通常把这个关闭操作放到 finally 块中以确保每次都能执行关闭。如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SqlSession session = sqlSessionFactory.openSession();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// do work</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="2-MyBatis开发DAO的方式"><a href="#2-MyBatis开发DAO的方式" class="headerlink" title="2.MyBatis开发DAO的方式"></a>2.MyBatis开发DAO的方式</h2><p>使用Mybatis开发Dao，通常有两个方法，即原始Dao开发方法和Mapper接口开发方法。<br>我们先来看看MyBatis原始开发dao的开发方式，发现原始开发的问题，然后再来看看MyBatis使用mapper动态代理开发dao的方式(也是MyBatis目前使用的开发dao的方式)。</p><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><ul><li>将下边的功能实现Dao：</li><li>根据用户id查询一个用户信息</li><li>根据用户名称模糊查询用户信息列表</li></ul><p>目录结构如下：<br><figure class="image-box">                <img src="http://owtr5yq3h.bkt.clouddn.com/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt="目录结构" title="" class="">                <p>目录结构</p>            </figure></p><h3 id="2-1原始Dao开发方法需要程序员编写Dao接口和Dao实现类。"><a href="#2-1原始Dao开发方法需要程序员编写Dao接口和Dao实现类。" class="headerlink" title="2.1原始Dao开发方法需要程序员编写Dao接口和Dao实现类。"></a>2.1原始Dao开发方法需要程序员编写Dao接口和Dao实现类。</h3><p>首先编写映射文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--根据ID获取用户信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"cn.liuyu.pojo.User"</span>&gt;</span></span><br><span class="line">        select * from user where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--模糊查询--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserByUserName"</span> <span class="attr">parameterType</span>=<span class="string">"string"</span> <span class="attr">resultType</span>=<span class="string">"cn.liuyu.pojo.User"</span>&gt;</span></span><br><span class="line">        select * from user where username like '%$&#123;value&#125;%'</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>编写Dao接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">//根据ID查询用户信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    <span class="comment">//模糊查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUserByUserName</span><span class="params">(String userName)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编写Dao实现类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过构造方法注入</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UserDaoImpl</span><span class="params">(SqlSessionFactory sqlSessionFactory)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.sqlSessionFactory = sqlSessionFactory;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findUserById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line"><span class="comment">//sqlSesion是线程不安全的,所以它的最佳使用范围在方法体内</span></span><br><span class="line">SqlSession openSession = sqlSessionFactory.openSession();</span><br><span class="line">User user = openSession.selectOne(<span class="string">"test.findUserById"</span>, id);</span><br><span class="line"><span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUserByUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">SqlSession openSession = sqlSessionFactory.openSession();</span><br><span class="line">List&lt;User&gt; list = openSession.selectList(<span class="string">"test.findUserByUserName"</span>, userName);</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编写测试类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory factory;</span><br><span class="line">    <span class="comment">//作用:在测试方法前执行这个方法</span></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String resource = <span class="string">"SqlMapConfig.xml"</span>;</span><br><span class="line">        <span class="comment">//通过流将核心配置文件读取进来</span></span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="comment">//通过核心配置文件输入流来创建会话工厂</span></span><br><span class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindUserById</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//将初始化好的工厂注入到实现类中</span></span><br><span class="line">        UserDao userDao = <span class="keyword">new</span> UserDaoImpl(factory);</span><br><span class="line">        User user = userDao.findUserById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindUserByUserName</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        UserDao userDao = <span class="keyword">new</span> UserDaoImpl(factory);</span><br><span class="line">        List&lt;User&gt; list = userDao.findUserByUserName(<span class="string">"王"</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>原始Dao开发中存在以下问题：</p><ul><li>Dao方法体存在重复代码：通过SqlSessionFactory创建SqlSession，调用SqlSession的数据库操作方法</li><li>调用sqlSession的数据库操作方法需要指定statement的id，这里存在硬编码，不利于开发维护。</li></ul><h3 id="2-2Mapper动态代理的方式"><a href="#2-2Mapper动态代理的方式" class="headerlink" title="2.2Mapper动态代理的方式"></a>2.2Mapper动态代理的方式</h3><h4 id="2-2-1-Mapper开发规范"><a href="#2-2-1-Mapper开发规范" class="headerlink" title="2.2.1 Mapper开发规范"></a>2.2.1 Mapper开发规范</h4><p>Mapper接口开发方法只需要程序员编写Mapper接口（相当于Dao接口），由Mybatis框架根据接口定义创建接口的动态代理对象，代理对象的方法体同上边Dao接口实现类方法。<br>Mapper接口开发需要遵循以下规范：</p><ul><li>1.Mapper.xml文件中的namespace与mapper接口的类路径相同。</li><li>2.Mapper接口方法名和Mapper.xml中定义的每个statement的id相同</li><li>3.Mapper接口方法的输入参数类型和mapper.xml中定义的每个sql 的parameterType的类型相同</li><li>4.Mapper接口方法的输出参数类型和mapper.xml中定义的每个sql的resultType的类型相同</li></ul><p>采用这种方式后，我们便可将第一篇文章中提到的User.xml改为UserMapper.xml</p><h4 id="2-2-2mapper-xml-映射文件"><a href="#2-2-2mapper-xml-映射文件" class="headerlink" title="2.2.2mapper.xml(映射文件)"></a>2.2.2mapper.xml(映射文件)</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">mapper接口代理实现编写规则:</span></span><br><span class="line"><span class="comment">1. 映射文件中namespace要等于接口的全路径名称</span></span><br><span class="line"><span class="comment">2. 映射文件中sql语句id要等于接口的方法名称</span></span><br><span class="line"><span class="comment">3. 映射文件中传入参数类型要等于接口方法的传入参数类型</span></span><br><span class="line"><span class="comment">4. 映射文件中返回结果集类型要等于接口方法的返回值类型</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.liuyu.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">id:sql语句唯一标识</span></span><br><span class="line"><span class="comment">parameterType:指定传入参数类型</span></span><br><span class="line"><span class="comment">resultType:返回结果集类型</span></span><br><span class="line"><span class="comment">#&#123;&#125;占位符:起到占位作用,如果传入的是基本类型(string,long,double,int,boolean,float等),那么#&#123;&#125;中的变量名称可以随意写.</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"cn.liuyu.pojo.User"</span>&gt;</span></span><br><span class="line">select * from user where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">如果返回结果为集合,可以调用selectList方法,这个方法返回的结果就是一个集合,所以映射文件中应该配置成集合泛型的类型</span></span><br><span class="line"><span class="comment">$&#123;&#125;拼接符:字符串原样拼接,如果传入的参数是基本类型(string,long,double,int,boolean,float等),那么$&#123;&#125;中的变量名称必须是value</span></span><br><span class="line"><span class="comment">注意:拼接符有sql注入的风险,所以慎重使用</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserByUserName"</span> <span class="attr">parameterType</span>=<span class="string">"string"</span> <span class="attr">resultType</span>=<span class="string">"cn.liuyu.pojo.User"</span>&gt;</span></span><br><span class="line">select * from user where username like '%$&#123;value&#125;%'</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-2-3编写Mapper接口"><a href="#2-2-3编写Mapper接口" class="headerlink" title="2.2.3编写Mapper接口"></a>2.2.3编写Mapper接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findUserById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//动态代理形势中,如果返回结果集问List,那么mybatis会在生成实现类的使用会自动调用selectList方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUserByUserName</span><span class="params">(String userName)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-4将mapper-xml在SqlMapConfing-xml中进行注册"><a href="#2-2-4将mapper-xml在SqlMapConfing-xml中进行注册" class="headerlink" title="2.2.4将mapper.xml在SqlMapConfing.xml中进行注册"></a>2.2.4将mapper.xml在SqlMapConfing.xml中进行注册</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;mapper resource="User.xml"/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">使用class属性引入接口的全路径名称:</span></span><br><span class="line"><span class="comment">使用规则:</span></span><br><span class="line"><span class="comment">1. 接口的名称和映射文件名称除扩展名外要完全相同</span></span><br><span class="line"><span class="comment">2. 接口和映射文件要放在同一个目录下</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;mapper class="cn.itheima.mapper.UserMapper"/&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用包扫描的方式批量引入Mapper接口 </span></span><br><span class="line"><span class="comment">使用规则:</span></span><br><span class="line"><span class="comment">1. 接口的名称和映射文件名称除扩展名外要完全相同</span></span><br><span class="line"><span class="comment">2. 接口和映射文件要放在同一个目录下</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.liuyu.mapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-2-5测试代码"><a href="#2-2-5测试代码" class="headerlink" title="2.2.5测试代码"></a>2.2.5测试代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> SqlSessionFactory factory;</span><br><span class="line"><span class="comment">//作用:在测试方法前执行这个方法</span></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">String resource = <span class="string">"SqlMapConfig.xml"</span>;</span><br><span class="line"><span class="comment">//通过流将核心配置文件读取进来</span></span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="comment">//通过核心配置文件输入流来创建会话工厂</span></span><br><span class="line">factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindUserById</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">SqlSession openSession = factory.openSession();</span><br><span class="line"><span class="comment">//通过getMapper方法来实例化接口</span></span><br><span class="line">UserMapper mapper = openSession.getMapper(UserMapper.class);</span><br><span class="line">User user = mapper.findUserById(<span class="number">1</span>);</span><br><span class="line">System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindUserByUserName</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">SqlSession openSession = factory.openSession();</span><br><span class="line"><span class="comment">//通过getMapper方法来实例化接口</span></span><br><span class="line">UserMapper mapper = openSession.getMapper(UserMapper.class);</span><br><span class="line">List&lt;User&gt; list = mapper.findUserByUserName(<span class="string">"王"</span>);</span><br><span class="line">System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-6小结"><a href="#2-2-6小结" class="headerlink" title="2.2.6小结"></a>2.2.6小结</h4><ul><li>1.selectOne和selectList<br>动态代理对象调用sqlSession.selectOne()和sqlSession.selectList()是根据mapper接口方法的返回值决定，如果返回list则调用selectList方法，如果返回单个对象则调用selectOne方法。</li><li>2.namespace<br>mybatis官方推荐使用mapper代理方法开发mapper接口，程序员不用编写mapper接口实现类，使用mapper代理方法时，输入参数可以使用pojo包装对象或map对象，保证dao的通用性。</li></ul>]]></content>
      
      <categories>
          
          <category> mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MyBatis之配置文件中的配置</title>
      <link href="/2018/05/28/MyBatisConfiger/"/>
      <url>/2018/05/28/MyBatisConfiger/</url>
      <content type="html"><![CDATA[<p>MyBatis配置文件很重要，首先我们来看看MyBatis配置文件中的内容和顺序,并对各个参数进行解释以及如何使用<br><a id="more"></a></p><h3 id="1-配置内容"><a href="#1-配置内容" class="headerlink" title="1.配置内容"></a>1.配置内容</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">properties（属性）</span><br><span class="line">settings（全局配置参数）</span><br><span class="line">typeAliases（类型别名）</span><br><span class="line">typeHandlers（类型处理器）</span><br><span class="line">objectFactory（对象工厂）</span><br><span class="line">plugins（插件）</span><br><span class="line">environments（环境集合属性对象）</span><br><span class="line">        environment（环境子属性对象）</span><br><span class="line">            transactionManager（事务管理）</span><br><span class="line">            dataSource（数据源）</span><br><span class="line">mappers（映射器）</span><br></pre></td></tr></table></figure><h3 id="2-properties（属性）"><a href="#2-properties（属性）" class="headerlink" title="2.properties（属性）"></a>2.properties（属性）</h3><p>SqlMapConfig.xml可以引用java属性文件中的配置信息如下：<br>在classpath下定义db.properties文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf-8</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=root</span><br></pre></td></tr></table></figure></p><p>然后在SqlMapperConfig.xml中进行配置:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"db.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>然后在<environments>标签中用${}符号做如下修改:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 和spring整合后 environments配置将废除--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用jdbc事务管理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure></environments></p><p><strong>注意:Mybatis将按照下面的顺序来加载属性</strong></p><ul><li>1.在 properties 元素体内定义的属性首先被读取。 </li><li>2.然后会读取properties 元素中resource或 url 加载的属性，它会覆盖已读取的同名属性。</li><li>3.最后读取parameterType(即insert标签或是update标签或是…)传递的属性，它会覆盖已读取的同名属性。</li></ul><p>所以我们建议使用properties标签时，不要在properties标签之间定义属性，只引用在.properties文件中定义的属性，并且.properties文件中定义的key值要有一些特殊的规则。例如我上述定义key值时前面都加了jdbc.的前缀。</p><h3 id="3-typeAliases（类型别名）"><a href="#3-typeAliases（类型别名）" class="headerlink" title="3.typeAliases（类型别名）"></a>3.typeAliases（类型别名）</h3><h4 id="3-1mybatis支持别名："><a href="#3-1mybatis支持别名：" class="headerlink" title="3.1mybatis支持别名："></a>3.1mybatis支持别名：</h4><figure class="image-box">                <img src="http://owtr5yq3h.bkt.clouddn.com/%E5%88%AB%E5%90%8D.png" alt="支持的别名" title="" class="">                <p>支持的别名</p>            </figure><p>这里我们采用自定义的别名，在SqlMapperConfig.xml中进行如下配置:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">定义单个pojo类别名</span></span><br><span class="line"><span class="comment">type:类的全路劲名称</span></span><br><span class="line"><span class="comment">alias:别名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"cn.liuyu.pojo.User"</span> <span class="attr">alias</span>=<span class="string">"user"</span>/&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用包扫描的方式批量定义别名 </span></span><br><span class="line"><span class="comment">定以后别名等于类名,不区分大小写,但是建议按照java命名规则来,首字母小写,以后每个单词的首字母大写</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.liuyu.pojo"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>里面包括定义单个别名和批量别名定义(即一次性定义一个包下所有.java文件的别名)。</p><p>定义别名后这样我们在parameterType和resultType中使用时就不用再繁琐的指定类的全限定类名了，像下面这样使用即可<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">"findUserById"</span> parameterType=<span class="string">"int"</span> resultType=<span class="string">"user"</span>&gt;</span><br><span class="line">select * from user where id=#&#123;id&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><h3 id="4-mappers（映射器）"><a href="#4-mappers（映射器）" class="headerlink" title="4.mappers（映射器）"></a>4.mappers（映射器）</h3><p>Mapper配置的几种方法：</p><ol><li><p><code>&lt;mapper resource=&quot; &quot; /&gt;</code><br>使用相对于类路径的资源,如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"sqlmap/User.xml"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>&lt;mapper class=&quot; &quot; /&gt;</code><br>使用mapper接口类路径,如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"cn.liuyu.mapper.UserMapper"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>注意</strong>：此种方法要求mapper接口名称和mapper映射文件名称相同，且放在同一个目录中。</p><ol start="3"><li><code>&lt;package name=&quot;&quot;/&gt;</code><br>注册指定包下的所有mapper接口,如：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.liuyu.mybatis.mapper"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>注意</strong>：此种方法要求mapper接口名称和mapper映射文件名称相同，且放在同一个目录中。</p>]]></content>
      
      <categories>
          
          <category> mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JDK8新特性之Lambda表达式</title>
      <link href="/2018/05/28/JDK8-Lambda/"/>
      <url>/2018/05/28/JDK8-Lambda/</url>
      <content type="html"><![CDATA[<p>Iterator接口大家肯定不会陌生，遍历集合用到的最多。同时它也是为集合而生，没有集合它也就没有意义。具体用法此处不在说明，主要谈谈新特性。<br>有人会说，JDK9已经发布了，为什么还要研究JDK8的特性呢?其实大多数新特性我们暂时不会用到。之所以谈谈JDK8的新特性，个人觉得用到的挺多，而且还能减少代码量和提高效率。</p><a id="more"></a><hr><p>本文主要介绍Lambda操作集合的三种用法</p><blockquote><p><em>使用Lambda表达式遍历集合</em>使用Lambda表达式遍历Iterator<br>*使用Java8新增的Predicate操作集合</p></blockquote><h2 id="使用Lambda表达式遍历集合"><a href="#使用Lambda表达式遍历集合" class="headerlink" title="使用Lambda表达式遍历集合"></a>使用Lambda表达式遍历集合</h2><p>JDK8为Iterable接口新增了一个ForEach（Consumer action)默认方法，该方法也是遍历集合的，所需要的参数类型是一个<code>函数式接口</code>，而Iterable接口是Collection接口的父接口，因此Collection集合也可以直接调用该方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class CollectionEach &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Collection books=new HashSet();</span><br><span class="line">        books.add(&quot;java深入浅出&quot;);</span><br><span class="line">        books.add(&quot;java疯狂讲义&quot;);</span><br><span class="line">        books.add(&quot;java编程思想&quot;);</span><br><span class="line">        //调用forEach方法遍历集合</span><br><span class="line">        books.forEach(book -&gt; System.out.println(book));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="使用Lambda表达式遍历Iterator"><a href="#使用Lambda表达式遍历Iterator" class="headerlink" title="使用Lambda表达式遍历Iterator"></a>使用Lambda表达式遍历Iterator</h2><p>JDK8为Iterator新增了一个forEachRemaininging(Consumer action)方法，该方法所需的Consumer参数同样也是<code>函数式</code>接口。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class IteratorEach &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Collection books=new HashSet();</span><br><span class="line">        books.add(&quot;java深入浅出&quot;);</span><br><span class="line">        books.add(&quot;java疯狂讲义&quot;);</span><br><span class="line">        books.add(&quot;java编程思想&quot;);</span><br><span class="line">        Iterator iterator=books.iterator();</span><br><span class="line">        //使用Lambda表达式遍历集合元素</span><br><span class="line">        iterator.forEachRemaining(book -&gt; System.out.println(book));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="使用Java8新增的Predicate操作集合"><a href="#使用Java8新增的Predicate操作集合" class="headerlink" title="使用Java8新增的Predicate操作集合"></a>使用Java8新增的Predicate操作集合</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Collection books = new HashSet();</span><br><span class="line">        books.add(&quot;集合是个好定西&quot;);</span><br><span class="line">        books.add(&quot;机械键盘真好用&quot;);</span><br><span class="line">        books.add(&quot;薄膜键盘便宜但是不好用，寿命短&quot;);</span><br><span class="line">        books.add(&quot;机械键盘价格高，但是使用寿命长，打字效率高。&quot;);</span><br><span class="line">        books.add(&quot;还有三天就过年了！&quot;);</span><br><span class="line">        books.add(&quot;每天坚持写八个小时代码&quot;);</span><br><span class="line">        books.add(&quot;不会写代码的程序员不是好厨师&quot;);</span><br><span class="line">        books.add(&quot;快过年了&quot;);</span><br><span class="line">        books.add(&quot;好好写代码&quot;);</span><br><span class="line">        Iterator iterator = books.iterator();</span><br><span class="line">        System.out.println(callAll(books, obj -&gt; ((String) obj).contains(&quot;键盘&quot;)));</span><br><span class="line">        System.out.println(callAll(books, obj -&gt; ((String) obj).contains(&quot;过年&quot;)));</span><br><span class="line">        System.out.println(callAll(books, obj -&gt; ((String) obj).length() &gt; 10));</span><br><span class="line">        </span><br><span class="line">        public static int callAll(Collection collection, Predicate predicate) &#123;</span><br><span class="line">        int total = 0;</span><br><span class="line">        for (Object obj : collection) &#123;</span><br><span class="line">            //使用lambda作为参数</span><br><span class="line">            if ((predicate.test(obj))) &#123;</span><br><span class="line">                total++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return total;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>还有一种操作集合的用法，后续会更新。</p>]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MyBatis之关联查询</title>
      <link href="/2018/04/27/MyBatis%E4%B9%8B%E5%85%B3%E8%81%94%E6%9F%A5%E8%AF%A2/"/>
      <url>/2018/04/27/MyBatis%E4%B9%8B%E5%85%B3%E8%81%94%E6%9F%A5%E8%AF%A2/</url>
      <content type="html"><![CDATA[<p>对于数据库中对表的增删改查操作，我们知道增删改都涉及的是单表，而只有查询操作既可以设计到单表操作又可以涉及到多表操作，所以对于输入映射parameterType而言是没有所谓的高级映射的，也就是说高级映射只针对于输出映射(因为高级映射设计到多张表)<br>现有一个<strong>商品订单数据模型</strong>，如下：<br><a id="more"></a><br><figure class="image-box">                <img src="http://owtr5yq3h.bkt.clouddn.com/%E8%AE%A2%E5%8D%95%E6%A8%A1%E5%9E%8B%E5%9B%BE.png" alt="商品订单数据模型" title="" class="">                <p>商品订单数据模型</p>            </figure></p><h2 id="1-一对一查询"><a href="#1-一对一查询" class="headerlink" title="1.一对一查询"></a>1.一对一查询</h2><p>案例：查询所有订单信息，关联查询下单用户信息。<br>注意：因为一个订单信息只会是一个人下的订单，所以从查询订单信息出发关联查询用户信息为一对一查询。如果从用户信息出发查询用户下的订单信息则为一对多查询，因为一个用户可以下多个订单。</p><h3 id="1-1方法一-使用resultType实现"><a href="#1-1方法一-使用resultType实现" class="headerlink" title="1.1方法一(使用resultType实现)"></a>1.1方法一(使用resultType实现)</h3><p>使用resultType，定义订单信息po类，此po类中包括了订单信息和用户信息：<br>SQL语句如下:<code>SELECT orders.*,user.username,users.address FROM orders,user WHERE orders.user_id = user.id</code></p><p>建立oders表和user表对应的pojo对象Orders.java和User.java<br>Orders对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Orders</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    <span class="keyword">private</span> String number;</span><br><span class="line">    <span class="keyword">private</span> Date createtime;</span><br><span class="line">    <span class="keyword">private</span> String note;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>并建立相关的get和set方法，User.java我们之前已建立。<br>通过查询语句，查询到的结果同时包括user表和orders表两张表的列，那么我们将结果映射到哪个pojo对象中呢？若映射到User.java，那查询结果中对应的orders表的字段一定会遗失；若映射到Orders.java，那查询结果中对应的user表的字段同样也会遗失。所以这里需要我们针对查询的结果重新创建一个映射的pojo对象CustomOrders.java(包含返回所有属性的对象)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomOrders</span> <span class="keyword">extends</span> <span class="title">Orders</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> uid;</span><br><span class="line"><span class="keyword">private</span> String username;<span class="comment">// 用户姓名</span></span><br><span class="line"><span class="keyword">private</span> String sex;<span class="comment">// 性别</span></span><br><span class="line"><span class="keyword">private</span> Date birthday;<span class="comment">// 生日</span></span><br><span class="line"><span class="keyword">private</span> String address;<span class="comment">// 地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>并建立相关的get和set方法<br>这里我们让CustomOrders.java继承自Orders.java，这样我们就只需在CustomOrders.java中添加user表中的字段即可。<br>这里我们让OrderCustom.java继承自Order.java，这样我们就只需在OrderCustom.java中添加user表中的字段即可。因为MyBatis主要的重点在sql语句，所以我们完成配置和pojo对象的建立后主要的点就放在了sql语句上，所以接下来要定义写sql语句的mapper.xml和对数据库进行操作的mapper.java接口了.<br>编写UserMapper.xml文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 一对一:自动映射 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findOrdersAndUser1"</span> <span class="attr">resultType</span>=<span class="string">"cn.liuyu.pojo.CustomOrders"</span>&gt;</span></span><br><span class="line"> select a.*, b.id uid, username, birthday, sex, address </span><br><span class="line"> from orders a, user b </span><br><span class="line"> where a.user_id = b.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>编写接口文件：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public List<span class="tag">&lt;<span class="name">CustomOrders</span>&gt;</span> findOrdersAndUser1();</span><br></pre></td></tr></table></figure></p><p>先初始化会化工厂<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory factory;</span><br><span class="line"><span class="comment">//作用:在测试方法前执行这个方法</span></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">String resource = <span class="string">"SqlMapConfig.xml"</span>;</span><br><span class="line"><span class="comment">//通过流将核心配置文件读取进来</span></span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="comment">//通过核心配置文件输入流来创建会话工厂</span></span><br><span class="line">factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindOrdersAndUser</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">SqlSession openSession = factory.openSession();</span><br><span class="line"><span class="comment">//通过getMapper方法来实例化接口</span></span><br><span class="line">UserMapper mapper = openSession.getMapper(UserMapper.class);</span><br><span class="line">List&lt;CustomOrders&gt; list = mapper.findOrdersAndUser1();</span><br><span class="line">System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>定义专门的po类作为输出类型，其中定义了sql查询结果集所有的字段。此方法较为简单，企业中使用普遍。</p><h3 id="1-2方法二-使用resultMap实现"><a href="#1-2方法二-使用resultMap实现" class="headerlink" title="1.2方法二(使用resultMap实现)"></a>1.2方法二(使用resultMap实现)</h3><p>思路:将关联查询的信息映射到pojo中，如下:只需在Orders类中创建一个User属性，将关联查询的信息映射到User属性中。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Orders</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    <span class="keyword">private</span> String number;</span><br><span class="line">    <span class="keyword">private</span> Date createtime;</span><br><span class="line">    <span class="keyword">private</span> String note;</span><br><span class="line">    <span class="comment">//关联用户信息</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样我们便可以将查询的结果映射到Orders.java类中，而不用自己再自定义一个pojo了。<br>编写UserMapper.xml文件，使用resultMap标签<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 一对一:手动映射 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">id:resultMap的唯一标识</span></span><br><span class="line"><span class="comment">type:将查询出的数据放入这个指定的对象中</span></span><br><span class="line"><span class="comment">注意:手动映射需要指定数据库中表的字段名与java中pojo类的属性名称的对应关系</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"cn.liuyu.pojo.Orders"</span> <span class="attr">id</span>=<span class="string">"orderAndUserResultMap"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- id标签指定主键字段对应关系</span></span><br><span class="line"><span class="comment">column:列,数据库中的字段名称</span></span><br><span class="line"><span class="comment">property:属性,java中pojo中的属性名称</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- result:标签指定非主键字段的对应关系 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_id"</span> <span class="attr">property</span>=<span class="string">"userId"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"number"</span> <span class="attr">property</span>=<span class="string">"number"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"createtime"</span> <span class="attr">property</span>=<span class="string">"createtime"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"note"</span> <span class="attr">property</span>=<span class="string">"note"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这个标签指定单个对象的对应关系 </span></span><br><span class="line"><span class="comment">property:指定将数据放入Orders中的user属性中</span></span><br><span class="line"><span class="comment">javaType:user属性的类型</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"user"</span> <span class="attr">javaType</span>=<span class="string">"cn.liuyu.pojo.User"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"address"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findOrdersAndUser2"</span> <span class="attr">resultMap</span>=<span class="string">"orderAndUserResultMap"</span>&gt;</span></span><br><span class="line">select a.*, b.id uid, username, birthday, sex, address</span><br><span class="line">from orders a, user b </span><br><span class="line">where a.user_id = b.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>编写接口方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Orders&gt; <span class="title">findOrdersAndUser2</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></p><p>测试代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindOrdersAnduUser2</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">SqlSession openSession = factory.openSession();</span><br><span class="line"><span class="comment">//通过getMapper方法来实例化接口</span></span><br><span class="line">UserMapper mapper = openSession.getMapper(UserMapper.class);</span><br><span class="line">List&lt;Orders&gt; list = mapper.findOrdersAndUser2();</span><br><span class="line">System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用association完成关联查询，将关联查询信息映射到pojo对象中。</p><h3 id="1-3比较resultType和resultMap完成一对一映射"><a href="#1-3比较resultType和resultMap完成一对一映射" class="headerlink" title="1.3比较resultType和resultMap完成一对一映射"></a>1.3比较resultType和resultMap完成一对一映射</h3><ul><li>resultType：要自定义pojo 保证sql查询列和pojo的属性对应，这种方法相对较简单，所以应用广泛。</li><li>resultType：要自定义pojo 保证sql查询列和pojo的属性对应，这种方法相对较简单，所以应用广泛。</li></ul><h2 id="2-一对多查询"><a href="#2-一对多查询" class="headerlink" title="2.一对多查询"></a>2.一对多查询</h2><p>需求：查询所有用户信息及用户关联的订单信息<br>用户信息和订单信息为一对多关系。<br>使用resultMap实现如下：</p><p>Sql语句:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.*, b.id <span class="keyword">oid</span> ,user_id, <span class="built_in">number</span>, createtime <span class="keyword">from</span> <span class="keyword">user</span> a, orders b <span class="keyword">where</span> a.id = b.user_id</span><br></pre></td></tr></table></figure></p><p>编写User类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">private</span> String username;<span class="comment">// 用户姓名</span></span><br><span class="line"><span class="keyword">private</span> String sex;<span class="comment">// 性别</span></span><br><span class="line"><span class="keyword">private</span> Date birthday;<span class="comment">// 生日</span></span><br><span class="line"><span class="keyword">private</span> String address;<span class="comment">// 地址</span></span><br><span class="line"><span class="comment">//关联订单信息</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Orders&gt; ordersList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编写UserMapper映射文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"cn.liuyu.pojo.User"</span> <span class="attr">id</span>=<span class="string">"userAndOrdersResultMap"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"address"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定对应的集合对象关系映射</span></span><br><span class="line"><span class="comment">property:将数据放入User对象中的ordersList属性中</span></span><br><span class="line"><span class="comment">ofType:指定ordersList属性的泛型类型</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"ordersList"</span> <span class="attr">ofType</span>=<span class="string">"cn.liuyu.pojo.Orders"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"oid"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_id"</span> <span class="attr">property</span>=<span class="string">"userId"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"number"</span> <span class="attr">property</span>=<span class="string">"number"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"createtime"</span> <span class="attr">property</span>=<span class="string">"createtime"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserAndOrders"</span> <span class="attr">resultMap</span>=<span class="string">"userAndOrdersResultMap"</span>&gt;</span></span><br><span class="line"> select a.*, b.id oid ,user_id, number, createtime </span><br><span class="line"> from user a, orders b where a.id = b.user_id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>编写接口文件:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUserAndOrders</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></p><p>测试代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindUserAndOrders</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">SqlSession openSession = factory.openSession();</span><br><span class="line"><span class="comment">//通过getMapper方法来实例化接口</span></span><br><span class="line">UserMapper mapper = openSession.getMapper(UserMapper.class);</span><br><span class="line">List&lt;User&gt; list = mapper.findUserAndOrders();</span><br><span class="line">System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>发现查询的结果已全部映射到pojo对象User.java的属性中。</p>]]></content>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MyBatis之动态SQL</title>
      <link href="/2018/04/26/MyBatisTrendsSQL/"/>
      <url>/2018/04/26/MyBatisTrendsSQL/</url>
      <content type="html"><![CDATA[<p>MyBatis 的强大特性之一便是它的动态 SQL。如果你有使用 JDBC 或其它类似框架的经验，你就能体会到根据不同条件拼接 SQL 语句的痛苦。例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态 SQL 这一特性可以彻底摆脱这种痛苦。<strong>通过mybatis提供的各种标签方法实现动态拼接sql。</strong><br><a id="more"></a></p><p>我们需要知道的是，使用mybatis重点是对sql的灵活解析和处理。在原先的UserMappser.xml中，我们这样查询表中满足条件的记录 :<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"userListResultMap"</span> <span class="attr">parameterType</span>=<span class="string">"cn.liuyu.pojo.QueryVo"</span> <span class="attr">resultMap</span>=<span class="string">"userListResultMap"</span>&gt;</span></span><br><span class="line">SELECT id,username,birthday,sex from user where username like '%$&#123;user.username&#125;%'</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>上述语句在表中查询满足<code>username</code>条件的记录，这样写查询语句有一个弊端，就是该语句只能通过username查询数据库。当我们在多条件中查询时，如果不需要username条件而是需要其它多个查询条件时，那UserMapper.xml文件中的这个查询条件就没用了。</p><p>需求:将自定义查询条件查询用户列表和查询用户列表总记录数改为动态sql。需要使用if标签和where标签。</p><h3 id="1-if和where"><a href="#1-if和where" class="headerlink" title="1.if和where"></a>1.if和where</h3><p>使用if标签和where标签在UserMapper.xml中添加如下内容:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserByUserNameAndSex"</span> <span class="attr">parameterType</span>=<span class="string">"cn.liuyu.pojo.User"</span> <span class="attr">resultType</span>=<span class="string">"cn.liuyu.pojo.User"</span>&gt;</span></span><br><span class="line">select * from user</span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username!=null and username!=''"</span>&gt;</span></span><br><span class="line">and username like '%$&#123;username&#125;%'</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"sex!=null and sex!=''"</span>&gt;</span></span><br><span class="line">and sex=#&#123;sex&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>注意</strong>：要做不等于空字符串校验。</p><p>编写接口文件：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUserByUserNameAndSex</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure></p><p>先初始化会化工厂<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory factory;</span><br><span class="line"></span><br><span class="line"><span class="comment">//作用:在测试方法前执行这个方法</span></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">String resource = <span class="string">"SqlMapConfig.xml"</span>;</span><br><span class="line"><span class="comment">//通过流将核心配置文件读取进来</span></span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="comment">//通过核心配置文件输入流来创建会话工厂</span></span><br><span class="line">factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindUserbyUserNameAndSex</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">SqlSession openSession = factory.openSession();</span><br><span class="line">通过getMapper方法来实例化接口</span><br><span class="line">UserMapper mapper = openSession.getMapper(UserMapper.class);</span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setUsername(<span class="string">"王"</span>);</span><br><span class="line">user.setSex(<span class="string">"2"</span>);</span><br><span class="line">List&lt;User&gt; list = mapper.findUserByUserNameAndSex(user);</span><br><span class="line">System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>&lt;where/&gt;</code>标签相当于where关键字，可以自动去除理第一个and。<br>发现<where>和<if>在上述两个查询语句中重复的代码出现了两次，那这里我们是否可以把相同的sql片段拿出来单独写在一个sql片段中然后再在不同的查询语句中应用呢？答案是肯定的,看下面的sql片段。</if></where></p><h3 id="2-SQL片段"><a href="#2-SQL片段" class="headerlink" title="2.SQL片段"></a>2.SQL片段</h3><p>Sql中可将重复的sql提取出来，使用时用include引用即可，最终达到sql重用的目的</p><h4 id="2-1定义sql片段"><a href="#2-1定义sql片段" class="headerlink" title="2.1定义sql片段"></a>2.1定义sql片段</h4><p>在UserMapper.xml中添加<code>&lt;sql&gt;</code>标签代表sql片段:<br>将where条件抽取出来<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 封装sql条件,封装后可以重用. </span></span><br><span class="line"><span class="comment">id:是这个sql条件的唯一标识 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"user_Where"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- where标签作用:</span></span><br><span class="line"><span class="comment">会自动向sql语句中添加where关键字</span></span><br><span class="line"><span class="comment">会去掉第一个条件的and关键字</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username != null and username != ''"</span>&gt;</span></span><br><span class="line">and username like '%$&#123;username&#125;%'</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"sex != null and sex != ''"</span>&gt;</span></span><br><span class="line">and sex=#&#123;sex&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这样就完成了sql片段的定义，然后才能使用sql片段。</p><h4 id="2-2使用sql片段"><a href="#2-2使用sql片段" class="headerlink" title="2.2使用sql片段"></a>2.2使用sql片段</h4><p>使用include引用<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserByUserNameAndSex"</span> <span class="attr">parameterType</span>=<span class="string">"cn.liuyu.pojo.User"</span> <span class="attr">resultType</span>=<span class="string">"cn.liuyu.pojo.User"</span>&gt;</span></span><br><span class="line">select * from user</span><br><span class="line"><span class="comment">&lt;!-- 调用sql条件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"user_Where"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>注意</strong>：如果引用其它mapper.xml的sql片段，则在引用时需要加上namespace，如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"namespace.sql片段”/&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>测试类代码不变，这样我们便完成了对sql片段的引用。</p><h3 id="3-foreach标签"><a href="#3-foreach标签" class="headerlink" title="3.foreach标签"></a>3.foreach标签</h3><p>首先我们需要在QueryVo中定义Listids属性:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryVo</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> User user;</span><br><span class="line"><span class="keyword">private</span> List&lt;Integer&gt; ids;</span><br><span class="line"><span class="comment">//省略Get/Set/ToString方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后我们在UserMapper.xml进行如下配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserByIds"</span> <span class="attr">parameterType</span>=<span class="string">"cn.liuyu.pojo.QueryVo"</span> <span class="attr">resultType</span>=<span class="string">"cn.liuyu.pojo.User"</span>&gt;</span></span><br><span class="line">select * from user</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"ids != null"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">foreach:循环传入的集合参数</span></span><br><span class="line"><span class="comment">collection:传入的集合的变量名称</span></span><br><span class="line"><span class="comment">item:每次循环将循环出的数据放入这个变量中</span></span><br><span class="line"><span class="comment">open:循环开始拼接的字符串</span></span><br><span class="line"><span class="comment">close:循环结束拼接的字符串</span></span><br><span class="line"><span class="comment">separator:循环中拼接的分隔符</span></span><br><span class="line"><span class="comment">最终拼接效果:select * from user where ids in(1,16,28,22)</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"ids"</span> <span class="attr">item</span>=<span class="string">"id"</span> <span class="attr">open</span>=<span class="string">"id in ("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">#&#123;id&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>编写接口文件:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUserByIds</span><span class="params">(QueryVo vo)</span></span>;</span><br></pre></td></tr></table></figure></p><p>编写测试代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindUserbyIds</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">SqlSession openSession = factory.openSession();</span><br><span class="line"><span class="comment">//通过getMapper方法来实例化接口</span></span><br><span class="line">UserMapper mapper = openSession.getMapper(UserMapper.class);</span><br><span class="line">QueryVo vo = <span class="keyword">new</span> QueryVo();</span><br><span class="line">List&lt;Integer&gt; ids = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">ids.add(<span class="number">1</span>);</span><br><span class="line">ids.add(<span class="number">16</span>);</span><br><span class="line">ids.add(<span class="number">28</span>);</span><br><span class="line">ids.add(<span class="number">22</span>);</span><br><span class="line">vo.setIds(ids);</span><br><span class="line">List&lt;User&gt; list = mapper.findUserByIds(vo);</span><br><span class="line">System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CentOs 7下安装JAVA环境</title>
      <link href="/2017/09/08/CentOs-7-install-environment/"/>
      <url>/2017/09/08/CentOs-7-install-environment/</url>
      <content type="html"><![CDATA[<h3 id="1-安装MySQL"><a href="#1-安装MySQL" class="headerlink" title="1.安装MySQL"></a>1.安装MySQL</h3><h5 id="CentOS-7的yum源中貌似没有正常安装MySQL时的MySql-sever文件，需要去官网上下载-分为三个步骤："><a href="#CentOS-7的yum源中貌似没有正常安装MySQL时的MySql-sever文件，需要去官网上下载-分为三个步骤：" class="headerlink" title="CentOS 7的yum源中貌似没有正常安装MySQL时的MySql-sever文件，需要去官网上下载,分为三个步骤："></a>CentOS 7的yum源中貌似没有正常安装MySQL时的MySql-sever文件，需要去官网上下载,分为三个步骤：</h5><p><code>wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</code><br><code>rpm -ivh mysql-community-release-el7-5.noarch.rpm</code><br><code>yum install mysql-community-server</code><br><a id="more"></a></p><h5 id="成功安装之后重启mysql服务："><a href="#成功安装之后重启mysql服务：" class="headerlink" title="成功安装之后重启mysql服务："></a>成功安装之后重启mysql服务：</h5><p><code>service mysqld restart</code></p><h5 id="初次安装mysql是root账户是没有密码的，设置密码的方法，先登录数据库；"><a href="#初次安装mysql是root账户是没有密码的，设置密码的方法，先登录数据库；" class="headerlink" title="初次安装mysql是root账户是没有密码的，设置密码的方法，先登录数据库；"></a>初次安装mysql是root账户是没有密码的，设置密码的方法，先登录数据库；</h5><p><code>use mysql;</code><br><code>UPDATE user SET Password=PASSWORD(&#39;yourpassword&#39;)where USER=&#39;root&#39;;</code><br><code>flush privileges;</code></p><h5 id="远程授权连接mysql-可以使用第三方可视化管理工具进行连接，这里是针对服务器的"><a href="#远程授权连接mysql-可以使用第三方可视化管理工具进行连接，这里是针对服务器的" class="headerlink" title="远程授权连接mysql(可以使用第三方可视化管理工具进行连接，这里是针对服务器的)"></a>远程授权连接mysql(可以使用第三方可视化管理工具进行连接，这里是针对服务器的)</h5><p><code>GRANT ALL PRIVILEGES ON *.* TO&#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;mypassword&#39; WITH GRANT OPTION;</code><br><code>FLUSH   PRIVILEGES;</code></p><hr><h3 id="2-安装JDK"><a href="#2-安装JDK" class="headerlink" title="2.安装JDK"></a>2.安装JDK</h3><h5 id="a-检测是否安装了jdk-运行java-version"><a href="#a-检测是否安装了jdk-运行java-version" class="headerlink" title="a.检测是否安装了jdk  运行java -version"></a>a.检测是否安装了jdk  运行java -version</h5><h5 id="b-若有需要将其卸载"><a href="#b-若有需要将其卸载" class="headerlink" title="b.若有需要将其卸载"></a>b.若有需要将其卸载</h5><h5 id="c-查看安装那些jdk"><a href="#c-查看安装那些jdk" class="headerlink" title="c.查看安装那些jdk"></a>c.查看安装那些jdk</h5><p><code>rpm -qa | grep java</code></p><h5 id="d-卸载"><a href="#d-卸载" class="headerlink" title="d.卸载"></a>d.卸载</h5><p>先卸载 openjdk 1.7<br><code>rpm -e --nodeps 卸载的包</code><br><code>rpm -e --nodeps java-1.7.0-openjdk-1.7.0.45-2.4.3.3.el6.i686</code></p><p>再卸载 openjdk 1.6<br><code>rpm -e --nodeps java-1.6.0-openjdk-1.6.0.0-1.66.1.13.0.el6.i686</code></p><h5 id="e-安装jdk"><a href="#e-安装jdk" class="headerlink" title="e.安装jdk"></a>e.安装jdk</h5><p>上传jdk 通过ftp软件上传(上传到root目录下)<br>在 /usr/local创建一个 java目录<br><code>mkdir java</code></p><p>将上传的jdk复制到 java目录下<br><code>cp /root/jdk.xxxxx.tar /usr/local/java</code></p><p>将其解压<br><code>tar -xvf jdk.xxx.tar</code></p><h5 id="f-安装依赖"><a href="#f-安装依赖" class="headerlink" title="f.安装依赖"></a>f.安装依赖</h5><p><code>yum install glibc.i686</code></p><p>g.配置环境变量<br>编辑<br><code>vi /etc/profile</code><br>在文件最后添加一下信息<br><code>#set java environment</code><br><code>JAVA_HOME=/usr/local/java/jdk目录</code><br><code>CLASSPATH=.:$JAVA_HOME/lib.tools.jar</code><br><code>PATH=$JAVA_HOME/bin:$PATH</code><br><code>export JAVA_HOME CLASSPATH PATH</code></p><p>保存退出<br><code>source /etc/profile</code><br>使更改的配置立即生效</p><hr><h3 id="3-安装Tomcat"><a href="#3-安装Tomcat" class="headerlink" title="3.安装Tomcat"></a>3.安装Tomcat</h3><h5 id="a-在-usr-local-创建tomcat目录"><a href="#a-在-usr-local-创建tomcat目录" class="headerlink" title="a.在/usr/local/        创建tomcat目录"></a>a.在/usr/local/        创建tomcat目录</h5><h5 id="b-复制tomcat-到-usr-local-tomcat"><a href="#b-复制tomcat-到-usr-local-tomcat" class="headerlink" title="b.复制tomcat 到 /usr/local/tomcat"></a>b.复制tomcat 到 /usr/local/tomcat</h5><h5 id="c-解压tomcat"><a href="#c-解压tomcat" class="headerlink" title="c.解压tomcat"></a>c.解压tomcat</h5><h5 id="d-启动tomcat-进入-bin"><a href="#d-启动tomcat-进入-bin" class="headerlink" title="d.启动tomcat 进入 bin"></a>d.启动tomcat 进入 bin</h5><p>方式1:<br><code>sh startup.sh</code><br>方式2:<br><code>./startup.sh</code></p><h5 id="e-开启端口号-8080"><a href="#e-开启端口号-8080" class="headerlink" title="e.开启端口号 8080"></a>e.开启端口号 8080</h5><p>8080端口放行<br><code>/sbin/iptables -I INPUT -p tcp --dport 8080 -j ACCEPT</code></p><p>将该设置添加到防火墙的规则中<br><code>/etc/rc.d/init.d/iptables save</code></p><p>注意:<br>查看日志文件<br><code>tail -f logs/catalina.out</code><br>退出 ctrl+c</p><h3 id="大功告成"><a href="#大功告成" class="headerlink" title="大功告成~"></a>大功告成~</h3>]]></content>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
